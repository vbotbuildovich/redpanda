/*
 * Copyright 2024 Redpanda Data, Inc.
 *
 * Licensed as a Redpanda Enterprise file under the Redpanda Community
 * License (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 *
 * https://github.com/redpanda-data/redpanda/blob/master/licenses/rcl.md
 */
#pragma once

#include "iceberg/manifest_entry.h"
#include "iceberg/partition_key_type.h"
#include "iceberg/values.h"

namespace iceberg {

// Converts the given manifest_entry to an struct_value.
//
// This can be helpful e.g. to convert a manifest into an Avro datum using Avro
// serialization code.
//
// The resulting value will have a type that could be generated by
// manifest_entry_type().
struct_value manifest_entry_to_value(const manifest_entry& entry);

// Converts the given struct_value to a manifest_entry.
//
// It is expected that the input value was constructed with a type generated by
// manifest_entry_type(). For instance, in reading entries from an Avro file,
// the Avro reader should use a manifest_entry_type() translated into a schema
// as its reader schema to ensure the resulting values abide by that schema.
//
// Throws if the above is not true and there is a type mismatch.
manifest_entry manifest_entry_from_value(struct_value v);

} // namespace iceberg
